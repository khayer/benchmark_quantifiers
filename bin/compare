#!/usr/bin/env ruby
require "benchmark_quantifiers"
require "optparse"
#require 'logger'
#require './logging'
#include Logging
#require 'optparse'
#require "erubis"

#####
#
#
####

# 2015/11/03 Katharina Hayer

$logger = Logger.new(STDERR)
$algorithms = [
  :cufflinks,
  :express,
  :ireckon,
  :isoem,
  :kallisto,
  :pennseq,
  :rsem,
  :stringtie
]

# Initialize logger
def setup_logger(loglevel)
  case loglevel
  when "debug"
    $logger.level = Logger::DEBUG
  when "warn"
    $logger.level = Logger::WARN
  when "info"
    $logger.level = Logger::INFO
  else
    $logger.level = Logger::ERROR
  end
end

def setup_options(args)
  options = {
    :debug => false,
    :print => false
  }

  opt_parser = OptionParser.new do |opts|
    opts.banner = "\nUsage: compare [options] truth estimated algorithm"
    opts.separator ""
    opts.separator "e.g. truth = transcript_metrics_ENS.PLD.txt"
    opts.separator "  produced by calculate_metrics"
    opts.separator "e.g. estimated = output file of tested alogrithm"
    opts.separator "e.g. algorithm = cufflinks"
    opts.separator ""

    opts.on("-d", "--debug", "Run in debug mode") do |v|
      options[:log_level] = "debug"
      options[:debug] = true
    end

    opts.on("-p", "--print", "print numbers to STDOUT") do |v|
      options[:print] = true
    end

    opts.on("-v", "--verbose", "Run verbosely") do |v|
      options[:log_level] = "info"
    end

    opts.separator ""
    opts.separator "Available algorithms are:"
    opts.separator "#{$algorithms.join("\n")}"
    opts.separator ""
    opts.separator "RunExample: bin/compare files/transcript_metrics_ENS.PLD.txt files/cufflinks.isoforms.fpkm_tracking cufflinks -d -p > tmp"
    opts.separator ""
  end

  args = ["-h"] if args.length == 0
  opt_parser.parse!(args)
  setup_logger(options[:log_level])
  if args.length != 3
    $logger.error("You only provided #{args.length} fields, but 3 required!")
    raise "Please specify the input (truth estimated algorithm)"
  end
  options
end

def run(argv)
  options = setup_options(argv)
  algorithm = argv[2].to_sym
  raise "Algorithm #{algorithm} is not supported; but there is #{$algorithms.join(", ")}" unless $algorithms.include?(algorithm)
  truth = argv[0]
  truth = Metrics.new(truth)
  truth.read_file()
  estimated = argv[1]
  case algorithm
  when :cufflinks
    $logger.debug("Cufflinks")
    estimated = Cufflinks.new(estimated)
    estimated.read_file()
    fpkm = true
  when :express
    $logger.debug("eXpress")
    estimated = Express.new(estimated)
    estimated.read_file()
    fpkm = true
  when :ireckon
    $logger.debug("IReckon")
    estimated = IReckon.new(estimated)
    estimated.read_file()
    fpkm = true
  when :isoem
    $logger.debug("IsoEM")
    estimated = IsoEM.new(estimated)
    estimated.read_file()
    fpkm = true
  when :kallisto
    $logger.debug("Kallisto")
    estimated = Kallisto.new(estimated)
    estimated.read_file()
    #estimated.tpm = Functions.replace_geneids(truth.geneid_to_transid, estimated.tpm)
    tpm = true
  when :rsem
    $logger.debug("RSEM")
    estimated = RSEM.new(estimated)
    estimated.read_file()
    fpkm = true
  when :pennseq
    $logger.debug("pennseq")
    estimated = Pennseq.new(estimated)
    estimated.read_file()
    fpkm = true
  when :stringtie
    $logger.debug("StringTie")
    estimated = StringTie.new(estimated)
    estimated.read_file()
    tpm = true
  end

  if fpkm
    rmse, pcc, spcc, mrd = Functions.compare(truth.fpkm, estimated.fpkm)
    if options[:print]
      Functions.print(truth.fpkm, estimated.fpkm)
    end
  end

  if tpm
    rmse, pcc, spcc, mrd = Functions.compare(truth.tpm, estimated.tpm)
    if options[:print]
      Functions.print(truth.tpm, estimated.tpm)
    end
  end
  $logger.info("rmse #{rmse}")
  $logger.info("pcc #{pcc}")
  $logger.info("spcc #{spcc}")
  $logger.info("mrd #{mrd}")
  $logger.debug("DEBUG")
  $logger.debug(options)
  $logger.debug(argv)
  $logger.info("All done!")
end

if __FILE__ == $0
  run(ARGV)
end





